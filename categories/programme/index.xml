<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programme on Mein Schmierzettel</title>
    <link>https://kaiserbarbarossa.github.io/categories/programme/</link>
    <description>Recent content in Programme on Mein Schmierzettel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language>
    <lastBuildDate>Tue, 20 Apr 2021 08:07:24 +0200</lastBuildDate><atom:link href="https://kaiserbarbarossa.github.io/categories/programme/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>.desktop-Dateien validieren</title>
      <link>https://kaiserbarbarossa.github.io/post/2021/04/20/desktop-dateien-validieren/</link>
      <pubDate>Tue, 20 Apr 2021 08:07:24 +0200</pubDate>
      
      <guid>https://kaiserbarbarossa.github.io/post/2021/04/20/desktop-dateien-validieren/</guid>
      <description>&lt;p&gt;Programmstarter und die meisten Symbole auf dem Desktop unter Linux sind eigentlich einfache Textdateien. Diese Textdateien enden mit der Dateiendung &amp;ldquo;.desktop&amp;rdquo; und heißen dementsprechend auch &lt;a href=&#34;https://wiki.ubuntuusers.de/.desktop-Dateien/&#34;&gt;.desktop-Dateien&lt;/a&gt;. Diese kann man entweder mit grafischen Programmen oder in einem Texteditor der Wahl erstellen. Die systemweiten Programmstarter liegen unter &lt;strong&gt;/usr/share/applications&lt;/strong&gt; und selbst Erstellte legt man am Besten unter &lt;strong&gt;~/.local/share/applications&lt;/strong&gt; ab. Aber natürlich kann man auch selbst solche Dateien schreiben und abspeichern - sei es weil man gerade ein Programm schreibt.&lt;/p&gt;
&lt;p&gt;Um das Verfassen solcher Dateien soll es hier aber nicht gehen, sondern darum, wie man .desktop-Dateien validiert, also auf Richtigkeit überprüft; denn wie für so vieles gibt es auch für diese Dateien eine Spezifikation auf &lt;a href=&#34;http://freedesktop.org/wiki/Specifications/desktop-entry-spec&#34;&gt;freedesktop.org&lt;/a&gt; Dafür gibt es in dem Paket &lt;em&gt;desktop-file-utils&lt;/em&gt;, ein Programm mit dem Namen &amp;ldquo;desktop-file-validate&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Die Anwendung des Programmes ist denkbar einfach:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;desktop-file-validate /PFAD/ZUR/DATEI
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hiermit kann man dann u.a. eigene .desktop-Dateien auf Richtigkeit überprüfen und bekommt recht exakte Fehlermeldungen angezeigt, wenn etwas nicht stimmt und wie man das korrigieren kann.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WeeChat: Benachrichtigungen bei Pings</title>
      <link>https://kaiserbarbarossa.github.io/post/2021/04/13/weechat-benachrichtigungen-bei-pings/</link>
      <pubDate>Tue, 13 Apr 2021 16:18:21 +0000</pubDate>
      
      <guid>https://kaiserbarbarossa.github.io/post/2021/04/13/weechat-benachrichtigungen-bei-pings/</guid>
      <description>&lt;p&gt;Für mich war lange ein großer Nachteil an &lt;a href=&#34;https://kaiserbarbarossa.github.io/post/2021/01/27/weechat/&#34;&gt;WeeChat&lt;/a&gt;, dass ich im Gegensatz zu Thunderbird keine Desktop-Benachrichtigungen erhalten habe, wenn ich angepingt wurde. Eine Lösung dazu habe ich im &lt;a href=&#34;https://wiki.archlinux.org/index.php/WeeChat#Desktop_notifications&#34;&gt;ArchWiki&lt;/a&gt; gefunden.&lt;/p&gt;
&lt;p&gt;Ich habe mich gegen die Lösung mit einem Plugin entschieden, da dass die Sache doch kompliziert hätte, was in diesem Punkt nicht nötig ist. Beide Lösungen benötigen &lt;a href=&#34;https://wiki.ubuntuusers.de/Benachrichtigungsdienst/#Eigene-Nachrichten-ausgeben&#34;&gt;libnotify&lt;/a&gt; um die Benachrichtigungen anzuzeigen.&lt;/p&gt;
&lt;p&gt;Also sprach Zarathustra:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install libnotify-bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;bzw.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -S libnotify
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Danach öffnet man WeeChat und gibt folgenden &amp;ldquo;Befehl&amp;rdquo; in WeeChat ein:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/set trigger.trigger.beep.command &amp;quot;/print -beep;/exec -bg notify-send -i &#39;/usr/share/icons/hicolor/32x32/apps/weechat.png&#39; &#39;IRC Notification&#39; &amp;quot;${tg_tag_nick}: ${tg_message_nocolor}&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Den neuen Firefox-Druckdialog deaktivieren</title>
      <link>https://kaiserbarbarossa.github.io/post/2021/03/29/neuen-firefox-druck-dialog-deaktivieren/</link>
      <pubDate>Mon, 29 Mar 2021 05:11:39 +0000</pubDate>
      
      <guid>https://kaiserbarbarossa.github.io/post/2021/03/29/neuen-firefox-druck-dialog-deaktivieren/</guid>
      <description>&lt;p&gt;Ich war recht erfreut als ich auf Mozillas Mailing-Listen davon las, dass es einen überarbeiten Druck-Dialog in Firefox 86 geben soll und war schon gespannt, was denn wirklich die Verbesserungen daran sein sollten.&lt;/p&gt;
&lt;p&gt;Ehrlich gesagt, muss ich aber nach ein paar Tagen zu dem Konsens kommen, dass sich meiner Meinung nach diese &amp;ldquo;Verbesserung&amp;rdquo; nicht zu einem Praxiseinsatz eignen. Leider.&lt;/p&gt;
&lt;p&gt;Natürlich ist das Deaktivieren einfach durch eine Änderung in &lt;code&gt;about:config&lt;/code&gt; getan:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;about:config&lt;/code&gt; öffnen&lt;/li&gt;
&lt;li&gt;Den Wert &lt;strong&gt;print.tab_modal.enabled&lt;/strong&gt; auf &amp;ldquo;false&amp;rdquo; ändern&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Ansiweather</title>
      <link>https://kaiserbarbarossa.github.io/post/2021/03/21/ansiweather/</link>
      <pubDate>Sun, 21 Mar 2021 20:19:17 +0100</pubDate>
      
      <guid>https://kaiserbarbarossa.github.io/post/2021/03/21/ansiweather/</guid>
      <description>&lt;p&gt;Um sich das Wetter unter Linux anzeigen zu lassen, gibt es mehrere Varianten. Entweder nimmt man den einfachen Weg und ruft einfach&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl http://wttr.in
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;im Terminal auf (optional kann man das auch als Skript packen und in &lt;strong&gt;~/bin&lt;/strong&gt; abspeichern) oder man nimmt &lt;strong&gt;ansiweather&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Bei diesem Programm handelt es sich im Prinzip auch nur um ein simples Shellskript. Unter Ubuntu und Co. installiert man es einfach mit APT - das entsprechende Paket heißt passenderweise auch einfach &lt;em&gt;ansiweather&lt;/em&gt;. Also&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install ansiweather
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nach dem Start des Programmes (Aufruf über das Kommando &lt;code&gt;ansiweather&lt;/code&gt; wird allerdings noch nicht der eigene Wohnort angezeigt. Dafür muss man erst die Datei &lt;strong&gt;~/.ansiweatherrc&lt;/strong&gt; anpassen. Eine Beispieldatei:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;api_key:85a4e3c55b73909f42c6a23ec35b7147
location:Berlin,DE
fetch_cmd:curl -s
units:metric
symbols:false
forecast:0
show_daylight:true
dateformat:%a %b %d
timeformat:%b %d %R

# Text and Colors
background:\033[44m
text:\033[36;1m
data:\033[33;1m
delimiter:\033[35m=&amp;gt;
dashes:\033[34m-
greeting_text:Aktuelles Wetter in
wind_text:Windgeschwindigkeit
humidity_text:Luftfeuchtigkeit
pressure_text:Luftdruck
sunrise_text:Sonnenaufgang
sunset_text:Sonnenuntergang

# Icons
sun:\033[33;1m\xe2\x98\x80
moon:\033[36m\xe2\x98\xbd
clouds:\033[37;1m\xe2\x98\x81
rain:\xe2\x98\x94
fog:\033[37;1m\xe2\x96\x92
mist:\033[34m\xe2\x96\x91
haze:\033[33m\xe2\x96\x91
snow:\033[37;1m\xe2\x9d\x84
thunderstorm:\xe2\x9a\xa1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Die meisten Einstellungen sind eigentlich selbsterklärend. Dieses Beispiel zeigt also das Wetter in Berlin an und ist das im Ubuntuusers-Wiki gezeigte Beispiel, es gefällt mir allerdings sehr gut und ich habe mir ansiweather auch in meine .bashrc gelegt.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Newsboat</title>
      <link>https://kaiserbarbarossa.github.io/post/2021/03/01/newsboat/</link>
      <pubDate>Mon, 01 Mar 2021 13:30:41 +0100</pubDate>
      
      <guid>https://kaiserbarbarossa.github.io/post/2021/03/01/newsboat/</guid>
      <description>&lt;p&gt;Mein liebster Feedreader ist eigentlich Newsbeuter. Dieser wird aber nicht mehr weiterentwickelt und ist deshalb auch für Ubuntu 20.04 nicht mehr in den Paketquellen. Schade&amp;hellip;&lt;/p&gt;
&lt;p&gt;Die gute Nachricht: Newsbeuter hat einen aktiv weiterentwickelten Fork - Newsboat. Und Newsboat ist sogar in den Paketquellen. Deshalb kann man das Programm mit folgendem Kommando installieren:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install newsboat
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Die Feeds werden in der Datei &lt;strong&gt;~/.newsboat/urls&lt;/strong&gt; abgespeichert. Hier schreibt man einfach eine URL in jede Zeile und startet danach Newsboat neu - alternativ benutzt man die Tastenkombination [Strg] + [R].&lt;/p&gt;
&lt;p&gt;Folgende Konfigurationen habe ich vorgenommen:&lt;/p&gt;
&lt;h2 id=&#34;newsboatconfig&#34;&gt;~/.newsboat/config&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;browser lariza
auto-reload yes
reload-time 10
user-agent &amp;quot;Lynx/2.8.9dev.16 libwww-FM/2.14 SSL-MM/1.4.1 GNUTLS/3.5.17&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Das bewirkt das beim Drücken von [o] der Artikel in Lariza geöffnet wird. Würde man hier &lt;code&gt;firefox&lt;/code&gt; eintragen, würde der Artikel in Firefox geöffnet werden. Die zweite und dritte Zeile sorgt dafür, dass die Feeds alle 10 Minuten neu eingelesen werden und die letzte Zeile ist der User-Agent, mit dem sich newsboat beim Abrufen der Feeds ausgibt, in meinem Fall also der User-Agent Lynx’. Die Konfigurationen und die Feed-Liste können 1:1 von newsbeuter übernommen werden.&lt;/p&gt;
&lt;h2 id=&#34;bashrc&#34;&gt;~/.bashrc&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[...]

alias newsboat=&#39;newsboat -r&#39;

[...]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Beim Öffnen von Newsboat werden die Feeds neueingelesen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Xfce: Themes auf der Kommandozeile auswählen</title>
      <link>https://kaiserbarbarossa.github.io/post/2021/02/15/xfce-themes-auf-der-kommandozeile-anpassen/</link>
      <pubDate>Mon, 15 Feb 2021 22:09:15 +0100</pubDate>
      
      <guid>https://kaiserbarbarossa.github.io/post/2021/02/15/xfce-themes-auf-der-kommandozeile-anpassen/</guid>
      <description>&lt;p&gt;Xfconf, also Xfces Konfigurationsmanager, bietet die Möglichkeit die Konfiguration nicht nur über die grafische Oberfläche sondern auch über die Kommandozeile zu nutzen. Dies ist zum Beispiel in Skripten nützlich.&lt;/p&gt;
&lt;p&gt;Das Theme lässt sich folgender Maßen anpassen:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xfconf-query -c xsettings -p /Net/ThemeName -s &amp;lt;NameDesThemas&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Und der Iconsatz lässt sich folgendermaßen anpassen:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xfconf-query -c xsettings -p /Net/IconThemeName -s &amp;lt;NameDesIconthemes&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So lässt sich bspw. ein Skript erstellen. Ich habe mir also zwei Skripte erstellt, die zwischen einem hellen und einem dunklen Theme wechseln.&lt;/p&gt;
&lt;p&gt;Theoretisch könnte man dies auch in einem Skript z.B. wie folgt zusammenfassen.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
if [ &amp;quot;$1&amp;quot; == &amp;quot;light&amp;quot; ]
    then
        xfconf-query -c xsettings -p /Net/ThemeName -s Adapta
        xfconf-query -c xsettings -p /Net/IconThemeName -s Papirus-Adapta
        notify-send &amp;quot;Theme&amp;quot; &amp;quot;Helles Theme aktiviert&amp;quot;
    elif [ &amp;quot;$1&amp;quot; == &amp;quot;dark&amp;quot; ]
        then
            xfconf-query -c xsettings -p /Net/ThemeName -s Adapta-Nokto
            xfconf-query -c xsettings -p /Net/IconThemeName -s Papirus-Adapta-Nokto
            notify-send &amp;quot;Theme&amp;quot; &amp;quot;Dunkles Theme aktiviert&amp;quot;
    else
        echo &amp;quot;Fehlendes oder falsches Argument. Beende...&amp;quot;
        exit 1
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wenn man das Skript jetzt also mit dem Argument &amp;ldquo;light&amp;rdquo; aufruft, würden ein helles Theme und ein helles Icontheme aktiviert und mit dem Argument &amp;ldquo;dark&amp;rdquo; mit einem entsprechenden dunklen Design. Die Themen müsste man natürlich entsprechend den eigenen Vorlieben anpassen&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Warum schreibt man einen eigenen Browser?</title>
      <link>https://kaiserbarbarossa.github.io/post/2021/02/14/warum-einen-eigenen-browser/</link>
      <pubDate>Sun, 14 Feb 2021 17:05:45 +0100</pubDate>
      
      <guid>https://kaiserbarbarossa.github.io/post/2021/02/14/warum-einen-eigenen-browser/</guid>
      <description>&lt;p&gt;Ich frage mich, warum ich hier eigentlich gar nicht über MyBrowse berichte. Viel mehr Infos darüber findet man tatsächlich im entsprechenden &lt;a href=&#34;https://forum.ubuntuusers.de/topic/mybrowse-ein-simpler-webkitbrowser-in-python/&#34;&gt;Thread&lt;/a&gt; auf ubuntuusers. Das will ich hiermit ändern und vor allem meine Ambition und meine Ziele dahinter klarmachen.&lt;/p&gt;
&lt;h1 id=&#34;warum&#34;&gt;Warum?&lt;/h1&gt;
&lt;p&gt;Computer sind viel zu schnell zu alt. Ich selber bin stolzer Nutzer eines ca. 10 Jahre alten Notebookes und muss demzufolge mit Restriktionen rechnen. Die meisten Browser wie Firefox (und &lt;strong&gt;auch&lt;/strong&gt; der oftmals als viel schneller und ressourcenschonender dargestellte Chrom{e/ium} frisst Ressourcen)&lt;/p&gt;
&lt;p&gt;Firefox ist ein toller Browser! Wirklich! Aber er ist halt sicher nicht der ressourcenschonenste.&lt;/p&gt;
&lt;p&gt;Viele Browser vergessen, wofür ein Webbrowser da ist. Man vergisst, dass ein Webbrowser Internetseiten darstellen soll und nicht noch zwei dutzend andere Dinge machen soll, auch wenn für mich ein bisschen Komfort beim Surfen dazugehört. Aber eben alles in Maßen.&lt;/p&gt;
&lt;p&gt;Es gibt für mich aktuell genau einen Browser, der alle diese Bedingungen erfüllt und das ist meiner Meinung nach &lt;a href=&#34;https://www.uninformativ.de/git/lariza/&#34;&gt;Lariza&lt;/a&gt;. Da ich aber nicht so hohe Anforderungen an einen Browser habe, habe ich also beschlossen, einen eigenen Browser zu programmieren, auch auf Basis WebKits sowie in Python.&lt;/p&gt;
&lt;p&gt;Was mich auch gestört hat, ist das viele Browser meinen, dass man einen eigenen Stil festlegen soll. Warum lege ich denn GTK-Themes fest, wenn jedes Programm dann doch eigene Farben definiert.&lt;/p&gt;
&lt;p&gt;Ein anderer Hintergrundgedanke für mich war, dass meine Pythonkenntnisse im Moment eher als rudimentär zu bezeichnen sind und ich diese so ausbauen will.&lt;/p&gt;
&lt;p&gt;So entstand innerhalb eines Tages die erste laufende Version von MyBrowse, die ich auch kurz darauf im o.g. Thread bekanntgab.&lt;/p&gt;
&lt;h1 id=&#34;quo-vadis&#34;&gt;Quo vadis?&lt;/h1&gt;
&lt;p&gt;MyBrowse ist &lt;strong&gt;mein&lt;/strong&gt; Webbrowser. Ich habe ihn als Ersatz für Firefox auf meinem Notebook geschrieben und habe meine eigenen Anforderungen an einen Browser.&lt;/p&gt;
&lt;p&gt;Von daher versteht es sich denke ich von selbst, dass ich gerne Ideen und Gedanken anderer Nutzer aufgreife, aber nicht alles umsetze. Ich möchte einen Browser, der auf mich zugeschnitten ist und der meine Anforderungen trifft. Auf keinen Fall möchte ich, dass daraus so ein wunderbarer, aber aufgeblähter, Browser wie Firefox entsteht, sondern dass es endlich einen Browser gibt, der auch für Systeme älteren Semesters funktioniert.&lt;/p&gt;
&lt;p&gt;Ich hoffe, dass ich hier während der Entwicklung noch mehr über MyBrowse schreiben werde.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MyBrowse</title>
      <link>https://kaiserbarbarossa.github.io/post/2021/02/07/mybrowse/</link>
      <pubDate>Sun, 07 Feb 2021 18:12:26 +0100</pubDate>
      
      <guid>https://kaiserbarbarossa.github.io/post/2021/02/07/mybrowse/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../mybrowse.png&#34; alt=&#34;Bildschirmfoto&#34; title=&#34;MyBrowse&#34;&gt;&lt;/p&gt;
&lt;p&gt;Kurz notiert: Vor ein paar Tagen hatte ich beschlossen einen eigenen WebKit-Browser in Python zu schreiben.&lt;/p&gt;
&lt;p&gt;Den Quellcode findet man unter &lt;a href=&#34;https://github.com/KaiserBarbarossa/MyBrowse.git&#34;&gt;https://github.com/KaiserBarbarossa/MyBrowse.git&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mehr zu meinen Ambitionen den Browser betreffend habe ich im ubuntuusers-Forum geschrieben: &lt;a href=&#34;https://forum.ubuntuusers.de/post/9227690/&#34;&gt;https://forum.ubuntuusers.de/post/9227690/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grafische Tools für Git</title>
      <link>https://kaiserbarbarossa.github.io/post/2021/01/31/grafische-git-tools/</link>
      <pubDate>Sun, 31 Jan 2021 20:01:46 +0100</pubDate>
      
      <guid>https://kaiserbarbarossa.github.io/post/2021/01/31/grafische-git-tools/</guid>
      <description>&lt;p&gt;Git, die Versionsverwaltung, die in meinen Augen als Notlösung startete und heute eines der besten Versionsverwaltungssysteme ist, ist eigentlich ein reines Kommandozeilentool. Mit den Grundfunktionen habe ich mich mittlerweile auch ein wenig eingearbeitet. Jetzt gibt es aber immer wieder Momente, wo ich dann doch den Commit-Verlauf grafisch sehen möchte. Meine Favoriten:&lt;/p&gt;
&lt;h2 id=&#34;gitg&#34;&gt;gitg&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../Bildschirmfoto_gitg.png&#34; alt=&#34;Bildschirmfoto von gitg&#34; title=&#34;gitg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Gitg ist super im grafischen Darstellen von Commitverläufen. Unter Ubuntu ist es mit folgendem Befehl installierbar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install gitg
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;thunar-vcs-plugin&#34;&gt;thunar-vcs-plugin&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../Bildschirmfoto_thunar-vcs.png&#34; alt=&#34;Bildschirmfoto von thunar-vcs-plugin&#34; title=&#34;thunar-vcs-plugin&#34;&gt;&lt;/p&gt;
&lt;p&gt;Der Dateimanager der Desktopumgebung XFCE, Thunar, ist durch Plugins und sog. benutzerdefinierte Aktionen erweiterbar. Eines dieser Plugins rüstet eine Unterstützung für Subversion und Git nach. Installierbar passenderweise über das Paket &lt;strong&gt;thunar-vcs-plugin&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; sudo apt-get install thunar-vcs-plugin
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;atom&#34;&gt;Atom&lt;/h2&gt;
&lt;p&gt;Atom ist vielmehr als einfach ein Programm für git. Es ist der von Github entwickelte Texteditor mit Unterstützung für Syntaxhighlighting mehrerer Sprachen, Plugins, eigenen Stylesheets sowie einer Git- und einer Github-Integration&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Weechat - der bessere IRC-Client</title>
      <link>https://kaiserbarbarossa.github.io/post/2021/01/27/weechat/</link>
      <pubDate>Wed, 27 Jan 2021 18:52:29 +0100</pubDate>
      
      <guid>https://kaiserbarbarossa.github.io/post/2021/01/27/weechat/</guid>
      <description>&lt;p&gt;Ich selber nutze als Messenger eigentlich nur den &lt;a href=&#34;https://wiki.ubuntuusers.de/IRC&#34;&gt;IRC&lt;/a&gt; und wurde letztens von einem Freenode-Staffer nur belächelt als ich erwähnte, dass ich Thunderbird als Client benutze. Empfohlen wurde mir für eine GTK-GUI Hexchat und für die Kommandozeile Weechat und irssi.&lt;/p&gt;
&lt;p&gt;Nach dem ich Weechat benutzte, brauche ich die anderen eigentlich gar nicht mehr, das Programm ist genial! Theoretisch funktioniert darin wohl auch Jabber, was ich aber nicht getestet habe, da der IRC mir reicht.&lt;/p&gt;
&lt;p&gt;Für Ubuntu/Debian etc. lässt sich das Programm wie folgt installieren:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install weechat weechat-plugins weechat-scripts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Für Debian muss man im Regelfall sich das sudo wegdenken und das als Root ausführen. Starten geht einfach mit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;weechat
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Weechat ist optimal für mich, da ich es einfach immer in Guake offen haben kann und bei Bedarf einblenden.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
